"""Add ScenarioStep, ColumnMapping, ProcessingRule, ExecutionLog, MonitoringResult models

Revision ID: 3aa103ee2622
Revises: 584a1d0cad8d
Create Date: 2025-04-16 17:46:44.222162

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '3aa103ee2622'
down_revision = '584a1d0cad8d'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('column_mapping',
    sa.Column('mapping_id', sa.Integer(), nullable=False),
    sa.Column('scraped_header', sa.String(length=255), nullable=False),
    sa.Column('template_header', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('scenario_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['scenario_id'], ['scenario.scenario_id'], ),
    sa.PrimaryKeyConstraint('mapping_id'),
    sa.UniqueConstraint('scenario_id', 'scraped_header', name='_scenario_scraped_header_uc')
    )
    with op.batch_alter_table('column_mapping', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_column_mapping_scenario_id'), ['scenario_id'], unique=False)

    op.create_table('execution_log',
    sa.Column('log_id', sa.Integer(), nullable=False),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'SUCCESS', 'FAILED', name='executionstatusenum'), nullable=False),
    sa.Column('report_file_path', sa.Text(), nullable=True),
    sa.Column('anomaly_report_path', sa.Text(), nullable=True),
    sa.Column('log_message', sa.Text(), nullable=True),
    sa.Column('scenario_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['scenario_id'], ['scenario.scenario_id'], ),
    sa.PrimaryKeyConstraint('log_id')
    )
    with op.batch_alter_table('execution_log', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_execution_log_scenario_id'), ['scenario_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_execution_log_status'), ['status'], unique=False)

    op.create_table('processing_rule',
    sa.Column('rule_id', sa.Integer(), nullable=False),
    sa.Column('condition_column', sa.String(length=255), nullable=False),
    sa.Column('operator', sa.Enum('EQUALS', 'NOT_EQUALS', 'CONTAINS', 'GREATER_THAN', 'LESS_THAN', 'IS_BLANK', 'IS_NOT_BLANK', name='ruleoperatorenum'), nullable=False),
    sa.Column('condition_value', sa.Text(), nullable=True),
    sa.Column('action_column', sa.String(length=255), nullable=False),
    sa.Column('action_value', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('scenario_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['scenario_id'], ['scenario.scenario_id'], ),
    sa.PrimaryKeyConstraint('rule_id')
    )
    with op.batch_alter_table('processing_rule', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_processing_rule_scenario_id'), ['scenario_id'], unique=False)

    op.create_table('scenario_step',
    sa.Column('step_id', sa.Integer(), nullable=False),
    sa.Column('sequence_order', sa.Integer(), nullable=False),
    sa.Column('action_type', sa.Enum('CLICK', 'TYPE', 'SELECT', 'EXTRACT_TABLE', 'EXTRACT_ELEMENT', 'NAVIGATE', name='actiontypeenum'), nullable=False),
    sa.Column('selector', sa.Text(), nullable=False),
    sa.Column('value', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('scenario_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['scenario_id'], ['scenario.scenario_id'], ),
    sa.PrimaryKeyConstraint('step_id')
    )
    with op.batch_alter_table('scenario_step', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_scenario_step_scenario_id'), ['scenario_id'], unique=False)

    op.create_table('monitoring_result',
    sa.Column('result_id', sa.BigInteger(), nullable=False),
    sa.Column('metric_name', sa.String(length=255), nullable=False),
    sa.Column('metric_value', sa.Text(), nullable=True),
    sa.Column('is_anomaly', sa.Boolean(), nullable=False),
    sa.Column('recorded_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('log_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['log_id'], ['execution_log.log_id'], ),
    sa.PrimaryKeyConstraint('result_id')
    )
    with op.batch_alter_table('monitoring_result', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_monitoring_result_is_anomaly'), ['is_anomaly'], unique=False)
        batch_op.create_index(batch_op.f('ix_monitoring_result_log_id'), ['log_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_monitoring_result_metric_name'), ['metric_name'], unique=False)
        batch_op.create_index(batch_op.f('ix_monitoring_result_recorded_at'), ['recorded_at'], unique=False)

    with op.batch_alter_table('report_template', schema=None) as batch_op:
        batch_op.create_unique_constraint(None, ['file_path'])

    with op.batch_alter_table('scenario', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_scenario_created_by_user_id'), ['created_by_user_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_scenario_report_template_id'), ['report_template_id'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('scenario', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_scenario_report_template_id'))
        batch_op.drop_index(batch_op.f('ix_scenario_created_by_user_id'))

    with op.batch_alter_table('report_template', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')

    with op.batch_alter_table('monitoring_result', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_monitoring_result_recorded_at'))
        batch_op.drop_index(batch_op.f('ix_monitoring_result_metric_name'))
        batch_op.drop_index(batch_op.f('ix_monitoring_result_log_id'))
        batch_op.drop_index(batch_op.f('ix_monitoring_result_is_anomaly'))

    op.drop_table('monitoring_result')
    with op.batch_alter_table('scenario_step', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_scenario_step_scenario_id'))

    op.drop_table('scenario_step')
    with op.batch_alter_table('processing_rule', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_processing_rule_scenario_id'))

    op.drop_table('processing_rule')
    with op.batch_alter_table('execution_log', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_execution_log_status'))
        batch_op.drop_index(batch_op.f('ix_execution_log_scenario_id'))

    op.drop_table('execution_log')
    with op.batch_alter_table('column_mapping', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_column_mapping_scenario_id'))

    op.drop_table('column_mapping')
    # ### end Alembic commands ###
